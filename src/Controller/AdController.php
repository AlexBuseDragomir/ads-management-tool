<?php

namespace App\Controller;

use App\Entity\Comment;
use App\Entity\Announcement;
use App\Form\FormTemplate;
use App\Entity\User;
use Proxies\__CG__\App\Entity\Category;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpFoundation\File\File;

class AdController extends Controller
{
    /**
     * @Route("/ads-management/", name="ads")
     */
    public function index()
    {
        $announcements = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->findNotExpiredAds();

        //dump($announcements);

        return $this->render('ad/index.html.twig', [
            'controller_name' => 'AdController', 'announcements' => $announcements
        ]);
    }

    /**
     * @Route("/ads-management/title/{title}", name="ad_title")
     */
    public function showAd($title)
    {
        $announcements = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->findAll();

        $element = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->find($title);

        foreach($announcements as $announcement)
        {
            if($announcement->getTitle() == $title)
            {
                $element = $announcement;
            }
        }

        $commentCount = count($element->getComments());

        return $this->render('ad/ad.html.twig', [
            'controller_name' => 'AdController', 'announcements' => $announcements, 'element' => $element,
            'title' => $title, 'commentCount' => $commentCount
        ]);
    }

    /**
     * @Route("/ads-management/new-ad", name="new_ad")
     */
    public function newAd(Request $request)
    {
        $announcement = new Announcement();
        $announcement -> setStartDate(new \DateTime('today'));
        $announcement -> setExpiryDate(new \DateTime('tomorrow'));

        $user = $this->getUser();
        $announcement ->setUser($user);

        $form = $this->createForm(FormTemplate::class, $announcement);
        $form->add('image', FileType::class, array('label' => 'image'));
        $form->add('save', SubmitType::class, array('label' => 'Post new ad'));

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            // $file stores the uploaded image file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $announcement->getImage();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('AdImages'),
                $fileName
            );

            // updates the 'image' property to store the file name
            // instead of its contents
            $announcement->setImage($fileName);

            $announcement = $form->getData();

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($announcement);
            $entityManager->flush();

            //var_dump($announcement);die;

            return $this->redirectToRoute('ads');
        }

        return $this->render('ad/new.html.twig', array('form' => $form->createView()));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/ads-management/edit-ad/{id}", name="edit_ad")
     */
    public function editAd(Request $request, $id)
    {
        $announcement = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->find($id);

        $announcement->setImage(
            new File($this->getParameter('AdImages').'/'.$announcement->getImage())
        );

        $form = $this->createForm(FormTemplate::class, $announcement);
        $form->add('edit', SubmitType::class, array('label' => 'Finish edit'));

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            $announcement = $form->getData();

            // $file stores the uploaded image file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $announcement->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('AdImages'),
                $fileName
            );

            // updates the 'image' property to store the file name
            // instead of its contents
            $announcement->setImage($fileName);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($announcement);
            $entityManager->flush();

            return $this->redirectToRoute('ad_title', array('title' => $announcement->getTitle()));
        }

        return $this->render('ad/ad_edit.html.twig', array(
            'form' => $form->createView(), 'announcement' => $announcement));
    }

    /**
     * @Route("/ads-management/delete-ad/{id}", name="delete_ad")
     * @Method("POST")
     */
    public function deleteAd(Request $request, $id)
    {
        $announcement = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->find($id);

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($announcement);
        $entityManager->flush();

        return $this->redirectToRoute('ads');
    }

    /**
     * @Route("/ads-management/new-comment/{id}", name="new_comment")
     */
    public function newComment(Request $request, $id)
    {
        $announcement = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->find($id);

        $comment = new Comment();
        $comment->setAnnouncement($announcement);
        $comment->setDate(new \DateTime('now'));

        $user = $this->getUser();
        $comment ->setUser($user);

        $form = $this->createFormBuilder($comment)
            ->add('user', EntityType::class, array(
                'class' => User::class, 'choice_label' => 'username', 'disabled' => true))
            ->add('text', TextareaType::class)
            ->add('save', SubmitType::class, array('label' => 'Post comment'))
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            $comment = $form->getData();

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($comment);
            $entityManager->flush();

            return $this->redirectToRoute('ad_title', array('title' => $announcement->getTitle()));
        }

        return $this->render('ad/new_comment.html.twig', array('form' => $form->createView()));
    }

    /**
     * @Route("/ads-management/edit-comment/{id}", name="edit_comment")
     */
    public function editComment(Request $request, $id)
    {
        $comment = $this->getDoctrine()
            ->getRepository(Comment::class)
            ->find($id);

        $form = $this->createFormBuilder($comment)
            ->add('user', EntityType::class,
                array('class' => User::class, 'choice_label' => 'username', 'disabled' => true))
            ->add('text', TextareaType::class)
            ->add('save', SubmitType::class, array('label' => 'Finish edit'))
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            $comment = $form->getData();

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($comment);
            $entityManager->flush();

            return $this->redirectToRoute('ad_title', array(
                'title' => $comment->getAnnouncement()->getTitle()));
        }

        return $this->render('ad/edit_comment.html.twig', array(
            'comment' => $comment, 'form' => $form->createView()));
    }

    /**
     * @Route("/ads-management/delete-comment/{id}", name="delete_comment")
     * @Method("POST")
     */
    public function deleteComment(Request $request, $id)
    {
        $comment = $this->getDoctrine()
            ->getRepository(Comment::class)
            ->find($id);

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($comment);
        $entityManager->flush();

        return $this->redirectToRoute('ad_title', array(
            'comment' => $comment, 'title' => $comment->getAnnouncement()->getTitle()));
    }

    /**
     * @Route("/ads-management/edit-image/{id}", name="edit_image")
     */
    public function editImage(Request $request, $id)
    {
        $announcement = $this->getDoctrine()
            ->getRepository(Announcement::class)
            ->find($id);

        $announcement->setImage(
            new File($this->getParameter('AdImages').'/'.$announcement->getImage())
        );

        $form = $this->createFormBuilder($announcement)
            ->add('image', FileType::class, array('label' => 'image'))
            ->add('edit', SubmitType::class, array('label' => 'Save new photo'))
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {
            $announcement = $form->getData();

            // $file stores the uploaded image file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $announcement->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('AdImages'),
                $fileName
            );

            // updates the 'image' property to store the file name
            // instead of its contents
            $announcement->setImage($fileName);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($announcement);
            $entityManager->flush();

            //var_dump($announcement);die;

            return $this->redirectToRoute('ad_title', array('title' => $announcement->getTitle()));
        }

        return $this->render('ad/ad_new_image.html.twig', array(
            'announcement' => $announcement, 'form' => $form->createView()));
    }
}
